@using System.Web.Script.Serialization
@model dynamic

@{
    ViewBag.Title = "Calculator";
}

<h2>Calculator</h2>
<div id="types">
    <div data-bind="foreach: types">
        <h3>Name:<span data-bind="text:TypeName"></span></h3>
        <table >
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Preview Value</th>
                </tr>
            </thead>
            <tbody  data-bind="foreach: Properties">
            <tr>                
                <td data-bind="click: AddProp"><span data-bind="text: Name"></span></td>
                <td><input type="text" data-bind="value: Value"/></td>
            </tr>
            <tbody/>
        </table>
    </div>
</div>

@Html.TextArea("Expression","",4,50,new Dictionary<string, object>())
<br/>
<script src="../../Scripts/knockout-2.1.0.js" type="text/javascript"></script>
<script src="../../Scripts/jquery-ui-1.8.22.js" type="text/javascript"></script>
<script src="../../Scripts/knockout.mapping-latest.debug.js" type="text/javascript"></script>
<h4>Result: <span id="result"></span></h4>
<input type="button" id="btnCalc" value="Calculate"/>
<input type="button" id="btnPreviewCalc" value="Preview"/>
<script type="text/javascript">
    var typesPayload = @Html.Raw(new JavaScriptSerializer().Serialize(Model));
    var functions = [
        'Abs',
       'Acos',
       'Asin',
       'Atan',
       'Ceiling',
       'Cos',
       'Exp',
       'Floor',
       'IEEERemainder',
       'Log',
       'Log10',
       'Max',
       'Min',
       'Pow',
       'Round',
       'Sign',
       'Sin',
       'Sqrt',
       'Tan',
       'Truncate'	 	
   ];
    function AddProp(data) {
            $('#Expression').append('['+data.Name()+'] ').focus();
        }
    
    $('#Expression').autocomplete({
        minLength:0,
        source : functions
        });

        $(document).ready(function () {
            $('#btnCalc').click(function () {
                var expression = $('#Expression').val();
                $.post('/home/Calculate', { Calculation: expression }, function (data) {
                    if (data.success === false) {
                        alert(data.errors);
                    }
                    $('#result').text(data.result);
                });
            });

            $('#btnPreviewCalc').click(function() {
               
                var expression = $('#Expression').val();
                for(var type in model.types()) {
                    for(var prop in model.types()[type].Properties()) {
                        var propToReplace = model.types()[type].Properties()[prop].Name();
                        var valueToAdd = model.types()[type].Properties()[prop].Value();
                       expression = expression.replace('['+propToReplace+']', valueToAdd);
                    }
                }
              
                 $.post('/home/Calculate', { Calculation: expression }, function (data) {
                    if (data.success === false) {
                        alert(data.errors);
                    }
                    $('#result').text(data.result).slideDown();
                });

            });
      

        model = {
            types: ko.mapping.fromJS(typesPayload)
        };

       
        ko.applyBindings(model);
              });
</script>